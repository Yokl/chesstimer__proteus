org 0h
	jmp start


org 30h
start:
	mov a,#0h
	mov r0,a		; обнуление r0
	mov a,#0h
	mov r1,a		; обнуление r1
	mov a,#4h
	mov r2,a		; обнуление r2
	mov a,#0h
	mov r3,a		; обнуление r3
	clr P0.6		; сброс бита порта P0.6
	clr P1.5		; сброс бита порта P1.5
	clr P1.6		; сброс бита порта P1.6
	clr P1.7		; сброс бита порта P1.7
	clr P2.7		; сброс бита порта P2.7
	clr P2.0		; сброс бита порта P2.0
	clr P2.1		; сброс бита порта P2.1
	clr P2.2		; сброс бита порта P2.2
	mov B,#1		; B=1 - "хожу я"
nn8:	call show1		; вызов процедуры show1 (отображение)
	jb P2.0, n1 		; кнопка "старт" первого микроконтроллёра
	jb P2.1, nn9 		; кнопка "старт" второго микроконтроллёра
	jb P2.2, nn10 		; увеличение времени на 10 минут
	jmp nn8 		; ожидание старта
nn10:	mov a,r0		; загружаем десятки минут
	add a,#1h 		; прибавляем десятки минут
	mov r0,a
nn11:	jb P2.2,nn11 		; цикл до момента отжатия кнопки
	jmp nn8 		; возвращение к началу цикла
nn9:	mov B,#0		; B=0 - хожу не я
n1:	mov r4,#5; 		; внутренний цикл обновления цифр на экране
nn2:	mov r5,#50;		; r4+r5 = 5*50
nn3:	call show1		; вызов процедуры show1 (отображение)
	djnz r5,nn3		; повторение цикла по r5 (50)
	djnz r4,nn2		; повторение цикла по r4 (5)

b1:	jnb P1.7, b2 		; мигалка-переключатель сведодиодов
	clr P1.7		; если горит Р1.7 - выключаем его 
	setb P1.6		; и включаем P1.6
	jmp b3
b2:	jnb P1.6, b3		; если горит P1.6
	clr P1.6		; выключаем его
	setb P1.7		; и включаем P1.7
b3:
	mov a, B		; загружаем регистр B
	cjne a,#1,n1		; если он равен 1, то време не идёт
	mov a,r3		; загружаем r3 (секунды)
	cjne a,#0h,ra1 		; если = 0 то
	mov r3,#9h		; меняем на 9
	jmp ra2			; и переходим менять десятки секунд
ra1:	subb a,#1		; если не = 0, то вычитаем 1
	mov r3,a		; проверяем 15 секунд
	cjne a,#5h,n1		; секунды = 5		
	mov a,r2
	cjne a,#1h,n1		; десятки секунд = 1	
	mov a,r1
	cjne a,#0h,n1		; минуты = 0
	mov a,r0
	cjne a,#0h,n1		; десятки минут = 0
	setb P1.7		; если всё так - зажигаем светодиод
	jmp n1			; возвращаемся в начало цикла
ra2:	mov a,r2		; загружаем десятки секунд
	cjne a,#0h,ra3 		; если = 0 то
	mov r2,#5h		; меняем на 5
	jmp ra4			; и переходим менять минуты
ra3:	subb a,#1		; если не = 0, то вычитаем 1
	mov r2,a		
	jmp n1			; и возвращаемся в начало цикла
ra4:	mov a,r1		; загружаем минуты
	cjne a,#0h,ra5 		; если = 0
	mov r1,#9h		; то минуты = 9
	mov r3,#9h		; секунды = 9
	mov r2,#5h		; десятки секунд = 5
	jmp ra6			; переходим менять десятки минут
ra5:	subb a,#1		; если не = 0, то вычитаем 1
	mov r1,a		; устанавливаем минуты
	mov r3,#9h		; секунды = 9
	mov r2,#5h		; десятки секунд = 5
	jmp n1			; возвращаемся в начало цикла
ra6:	mov a,r0 		; загрудаем десятки минут
	cjne a,#0h,ra7		; если = 0 то
	mov r1,#0h		; все цифры равны нулю
	mov r2,#0h		; и это больше не меняется
	mov r3,#0h
	jmp n1			; возвращаемся в начало цикла
ra7:	subb a,#1		; если не = 0, то вычитаем 1
	mov r0,a		; устанавливаем десятки минут
	mov r1,#9h		; минуты = 9
	mov r2,#5h		; десятки секунд = 5
	mov r3,#9h		; секунды = 9
	jmp n1			; возвращаемся в начало цикла

show1:	
	clr P1.1		; очищаем регистры 1,2,3
	clr P1.2
	clr P1.3
	setb P1.0		; устанавливаем регистр первой цифры
	mov a,r0		; загружаем десятки минут
	call compABCD		; подбираем двоичное значение
	mov P3,a		; выводим первой цифрой
	call delay1		; выполняем задержку
	clr P1.0		; очищаем регистры 0,2,3
	clr P1.2
	clr P1.3
	setb P1.1		; устанавливаем регистр второй цифры
	mov a,r1		; загружаем минуты
	call compABCD		; подбираем двоичное значение
	mov P3,a		; выводим второй цифрой
	clr P3.0		; устанавливаем бит "запятой-разделителя"
	call delay1		; выполняем задержку
	clr P1.0		; очищаем регистры 0,1,3
	clr P1.1
	clr P1.3
	setb P1.2		; устанавливаем регистр третьей цифры
	mov a,r2		; загружаем десятки секунды
	call compABCD		; подбираем двоичное значение
	mov P3,a		; выводим третьей цифрой
	call delay1		; выполняем задержку
	clr P1.0		; очищаем регистры 0,1,2
	clr P1.1
	clr P1.2
	setb P1.3		; устанавливаем регистр четвёртой цифры
	mov a,r3		; загружаем секунды
	call compABCD		; подбираем двоичное значение
	mov P3,a		; выводим четвёртой цифрой
	call delay1		; выполняем задержку
	ret			; возврат

compABCD:
	cjne a,#1h,pa1		; сравниваем с 1
	mov a,#10011111b	; соответствующее двоичное значение
	jmp paB			; переходим на возврат
pa1:	cjne a,#2h,pa2		; сравниваем с 2
	mov a,#00100101b	; соответствующее двоичное значение
	jmp paB
pa2:	cjne a,#3h,pa3		; сравниваем с 3
	mov a,#00001101b	; соответствующее двоичное значение
	jmp paB
pa3:	cjne a,#4h,pa4		; сравниваем с 4
	mov a,#10011001b	; соответствующее двоичное значение
	jmp paB
pa4:	cjne a,#5h,pa5		; сравниваем с 5
	mov a,#01001001b	; соответствующее двоичное значение
	jmp paB
pa5:	cjne a,#6h,pa6		; сравниваем с 6
	mov a,#01000001b	; соответствующее двоичное значение
	jmp paB
pa6:	cjne a,#7h,pa7		; сравниваем с 7
	mov a,#00011111b	; соответствующее двоичное значение
	jmp paB
pa7:	cjne a,#8h,pa8		; сравниваем с 8
	mov a,#00000001b	; соответствующее двоичное значение
	jmp paB
pa8:	cjne a,#9h,pa9		; сравниваем с 9
	mov a,#00001001b	; соответствующее двоичное значение
	jmp paB			
pa9:	mov a,#00000011b	; 0, если другие значения не подошли
paB:
	ret			; возврат

delay1:

M1:	mov r6,#2		; загружем значения задержки
M2:	mov r7,#100		; r6+r7 = 2*100 - задержка между
M3:	djnz r7,M3		; выводами цифр на дисплей
	djnz r6,M2
	jnb P1.5, M4		; если нажата кнопка моего хода
	mov B,#0		; то ставим значение остановки времени
M4:	jb P2.7, M5		; если нажата кнопка его хода
	ret
M5:	mov B,#1		; то ставим значение запуска времени
	ret
END